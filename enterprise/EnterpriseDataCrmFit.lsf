MODULE EnterpriseDataCrmFit;

REQUIRE EnterpriseData, EnterpriseDataExchange, EnterpriseTest, EnterpriseDataOtherProperty,
        LegalEntityFit, Customer, PaymentContract, Payment, Expense, ExpenseFit, Utils, Time;

NAMESPACE EnterpriseData;

EXTEND CLASS LegalEntity : EnterpriseData.Partner;

FORM inputBalance 'Ввод нач. остатка'
    OBJECTS le = LegalEntity PANEL NULL 
    PROPERTIES name(le) SELECTOR 
    OBJECTS balanceDate = DATE PANEL 
    PROPERTIES balanceDate 'Остаток на дату' = VALUE (balanceDate)
    OBJECTS balance = NUMERIC[10,2] PANEL NULL 
    PROPERTIES balance 'Начальный остаток' = VALUE (balance)
        EVENTS ON INIT {
            SEEK inputBalance.balanceDate = 2010_12_31;
        }
        EVENTS ON OK {
            IF balance AND isCompany(le) THEN {
                NEW o = Payment {
                    date(o) <- balanceDate;
                    sum(o) <- balance;
                    note(o) <- 'ОСТАТОК на НАЧАЛО';
                    company(o) <- le;
                    legalEntity(o) <-le;
                }
            } ELSE MESSAGE 'Остаток или компания определены неверно';
        }
; 

onClsDataImport 'Очистить ранее принятые платежи' (Configuration c) {
    ASK 'Вы действительно хотите удалить\nранее принятые данные\nплатежных поручений?' DO {
        DELETE Payment p WHERE p IS Payment AND uid(p);
        DELETE Expense e WHERE e IS Expense AND uid(e);
        idReceived(c) <- NULL;
        idSended(c) <- NULL;
        SHOW inputBalance;
        APPLY;
    } ELSE MESSAGE 'Операция отменена';
}

rewriteUidLegalEntity 'Перезаписывать uid при получении' = DATA BOOLEAN ();
company 'ID Компания' = DATA LegalEntity (Configuration);
companyName 'Компания' (Configuration c)  = name(company(c)); // надо для платежей
CONSTRAINT company(Configuration c) AND NOT isCompany(company(c))  MESSAGE 'Организация не является компанией';

checkInn 'Проверка клиента по ИНН' (STRING[12] cid) = GROUP LAST LegalEntity o ORDER o BY INN(o);
checkCompany 'Проверка на принадлежность компании' (Configuration c,STRING[36] uid) = 
                    GROUP MAX (tempAccount t) IF uidDocument(t) = uid AND innCompany(t) = INN(company(c));

accountCompany 'Импортировать данные,\nсвязанные только с\nэтим р/счетом' = DATA STRING[50] (Configuration); 
checkAccount 'Проверка по выбранному счету' (Configuration c,STRING[36] uid) =
    IF NOT accountCompany(c) THEN TRUE ELSE
       (IF GROUP MAX (tempAccount t) IF uidDocument(t) = uid AND accountNumber(t) = accountCompany(c) THEN TRUE ELSE NULL);
       

// grid
EXTEND FORM integrationData 
    PROPERTIES rewriteUidLegalEntity(), onClsDataImport(c), onShowTestExpense(), onShowTestPayments() 
    PROPERTIES(c) READONLY companyName, accountCompany
;    

// редактирование
EXTEND FORM configuration 
    PROPERTIES (c) companyName, accountCompany;

DESIGN configuration {
    BOX (c) {
        MOVE PROPERTY (companyName(c));
        MOVE PROPERTY (accountCompany(c));
    }    
}
   
DESIGN integrationData {
    enterpriseData {
        NEW cntOther BEFORE cGrid {
            horizontal = TRUE; 
            caption = 'Дополнительно';
            MOVE PROPERTY (rewriteUidLegalEntity());
            MOVE PROPERTY (onClsDataImport(c));
            MOVE PROPERTY (onShowTestPayments());
            MOVE PROPERTY (onShowTestExpense()); 
        }
    }
}

// Configuration, Expense, PartnerPaymentOrder, PaymentOrder, Detail
// Расчеты с организациями
// Создавать клиента, если не существуе организация - не будем. так как нет четких критереев поиска клиента 
// Если надо связать с клиентом, то пусть привязывают самостоятельно
META onImportData(Ind, Table, Partner, Procedure, Detail)
    onImportData##Ind(Configuration c) {
    // организации
    // -----------------------------------------------------------------------------------------------------------------------------
    // для каждого объекта (отдельного клиента, отдельного документа) существует свой уникальный UID
    // группируем по UID (GROUP MAX) и таблицу для FOR попадут только уникальные уникальные элементы массива с индексом i
    // по условию, что такой ИНН не существует (checkInn)
        FOR INTEGER i = [GROUP MAX INTEGER j BY uid##Partner(j)](ISTRING[36] d) AND  
            NOT object(uid##Partner(i)) AND NOT checkInn(inn##Partner(i)) DO NEW le = LegalEntity.LegalEntity {
                    uid(le) <- uid##Partner(i);
                    LegalEntity.name(le) <- ISTRING[250](name##Partner(i));
                    LegalEntity.fullName(le) <- ISTRING[250](fullName##Partner(i));
                    LegalEntityFit.INN(le) <- STRING[12](inn##Partner(i));
                    LegalEntityFit.KPP(le) <- STRING[9](kpp##Partner(i));
        } 
        // обратная синронизация по ИНН: Если организация существует по ИНН, то переписываем для нее UID
        // тогда для платежек всегда будут свои организации
        FOR INTEGER i = [GROUP MAX INTEGER j BY uid##Partner(j)](ISTRING[36] d) AND 
            NOT object(uid##Partner(i)) AND rewriteUidLegalEntity() AND LegalEntity le = checkInn(inn##Partner(i)) DO { uid(le) <- uid##Partner(i); }
        //  платежи
        FOR uid##Procedure(INTEGER i) AND NOT object(uid##Procedure(i)) AND checkCompany(c, uid##Procedure(i)) DO NEW e = Table.Table { 
            uid(e) <- uid##Procedure(i); 
        }
        FOR Table.Table o = object(uid##Procedure(INTEGER i)) AS Table AND checkAccount(c,uid##Procedure(i)) DO {
            Table.number(o) <- STRING[15](id##Procedure(i));
            Table.date(o) <- toDateFormat(date##Procedure(i),'YYYY-MM-DD');
            Table.sum(o) <- NUMERIC[16,5](sum##Procedure(i));
            Table.note(o) <- ISTRING[100](purpose##Detail(i));
            Table.company(o) <- company(c); 
            Table.legalEntity(o) <- object(uid##Partner(i)) AS LegalEntity;
            Table.account(o) <- account(GROUP MAX tempAccount t IF uidDocument(t) = uid##Procedure(i));
        }
   } 
END

META onImportDataP(Ind, Table, Partner, Procedure, Detail)
    onImportDataP##Ind(Configuration c) {
    // организации
    // -----------------------------------------------------------------------------------------------------------------------------
    // для каждого объекта (отдельного клиента, отдельного документа) существует свой уникальный UID
    // группируем по UID (GROUP MAX) и таблицу для FOR попадут только уникальные уникальные элементы массива с индексом i
    // по условию, что такой ИНН не существует (checkInn)
        FOR INTEGER i = [GROUP MAX INTEGER j BY uid##Partner(j)](ISTRING[36] d) AND  
            NOT object(uid##Partner(i)) AND NOT checkInn(inn##Partner(i)) DO NEW le = LegalEntity.LegalEntity {
                    uid(le) <- uid##Partner(i);
                    LegalEntity.name(le) <- ISTRING[250](name##Partner(i));
                    LegalEntity.fullName(le) <- ISTRING[250](fullName##Partner(i));
                    LegalEntityFit.INN(le) <- STRING[12](inn##Partner(i));
                    LegalEntityFit.KPP(le) <- STRING[9](kpp##Partner(i));
        } 
        // обратная синронизация по ИНН: Если организация существует по ИНН, то переписываем для нее UID
        // тогда для платежек всегда будут свои организации
        FOR INTEGER i = [GROUP MAX INTEGER j BY uid##Partner(j)](ISTRING[36] d) AND 
            NOT object(uid##Partner(i)) AND rewriteUidLegalEntity() AND LegalEntity le = checkInn(inn##Partner(i)) DO { uid(le) <- uid##Partner(i); }
        //  платежи
        FOR uid##Procedure(INTEGER i) AND NOT object(uid##Procedure(i)) AND checkCompany(c, uid##Procedure(i)) DO NEW e = Table.Table { 
            uid(e) <- uid##Procedure(i); 
        }
        LOCAL ot = tempAccount ();
        FOR Table.Table o = object(uid##Procedure(INTEGER i)) AS Table AND checkAccount(c,uid##Procedure(i)) DO {
            Table.number(o) <- STRING[15](id##Procedure(i));
            Table.date(o) <- toDateFormat(date##Procedure(i),'YYYY-MM-DD');
            Table.sum(o) <- NUMERIC[16,5](sum##Procedure(i));
            Table.note(o) <- ISTRING[100](purpose##Detail(i));
            Table.company(o) <- company(c); 
            Table.legalEntity(o) <- object(uid##Partner(i)) AS LegalEntity;
            ot() <- GROUP MAX tempAccount t IF uidDocument(t) = uid##Procedure(i);
            Table.account(o) <- account(ot());
            Table.contract(o) <- GROUP MAX (Contract.Contract oc) 
                IF legalEntity(oc) = Table.legalEntity(o) AND number(oc) = contractNumber(ot());
        }
   } 
END


// Внутренние расчеты
META onImportDataShort(Ind, Table, Procedure, Detail, innLE, nameLE)
    onImportData##Ind(Configuration c) {
        FOR uid##Procedure(INTEGER i) AND NOT object(uid##Procedure(i)) AND checkCompany(c, uid##Procedure(i)) DO NEW e = Table.Table { 
            uid(e) <- uid##Procedure(i); 
        }
        FOR Table.Table o = object(uid##Procedure(INTEGER i)) AS Table AND checkAccount(c,uid##Procedure(i)) DO {
            Table.number(o) <- STRING[15](id##Procedure(i));
            Table.date(o) <- toDateFormat(date##Procedure(i),'YYYY-MM-DD');
            Table.sum(o) <- NUMERIC[16,5](sum##Procedure(i));
            Table.note(o) <- ISTRING[100](purpose##Detail(i));
            Table.legalEntity(o) <- company(c);
            Table.company(o) <- company(c); 
            Table.account(o) <- account(GROUP MAX tempAccount t IF uidDocument(t) = uid##Procedure(i));
        }
    }    
END 

// ==================================================================================================================
// РАСХОДЫ (Expense), оплачивает FIT
// относительно коментария СБДСРххх
// смотрим EnterpriseDataExchange определение CLASS ABSTRACT ... Документ, CLASS ABSTRACT ...Строка
// ==================================================================================================================

// СБДСРасчетыСКонтрагентами 
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentPartner;
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentPartnerDetail;
@onImportData(101, Expense, PartnerOutcomePaymentPartner, OutcomePaymentPartner, OutcomePaymentPartner);

// СБДСРасчетыССотрудниками
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentEmployee;
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentEmployeeDetail;
@onImportDataShort(102, Expense, OutcomePaymentEmployee, OutcomePaymentEmployee,'x102','1С СБДС РасчетыССотрудниками');

// СБДСПеречислениеЗаработнойПлаты
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentSalary;
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentSalaryDetail;
@onImportData(103, Expense, PartnerOutcomePaymentSalary, OutcomePaymentSalary, OutcomePaymentSalary); 

// СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentPersonalAccount;
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentPersonalAccountDetail;
@onImportDataShort(104, Expense, OutcomePaymentPersonalAccount, OutcomePaymentPersonalAccount,'x104','1С СБДС ПеречислениеЗаработнойПлатыНаЛицевыеСчета');

// СБДСПереводНаДругойСчет
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentInternal;
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentInternalDetail;
@onImportDataShort(105, Expense, OutcomePaymentInternal, OutcomePaymentInternal, 'x105', '1С СБДС ПереводНаДругойСчет');

// СБДСПрочееСписание
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentOther;
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentOtherDetail;
@onImportData(106, Expense, PartnerOutcomePaymentOther, OutcomePaymentOther, OutcomePaymentOther);

// СБДСПрочиеРасходы
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentExpenses;
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentExpensesDetail;
@onImportData(107, Expense, PartnerOutcomePaymentExpenses, OutcomePaymentExpenses, OutcomePaymentExpenses);

// СБДСКонвертацияВалюты
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentExchange;
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentExchangeDetail;
@onImportData(108, Expense, PartnerOutcomePaymentExchange, OutcomePaymentExchange, OutcomePaymentExchange);

// СБДСПлатежиВБюджет
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentBudget;
EXTEND CLASS Expense : EnterpriseData.OutcomePaymentBudgetDetail;
@onImportData(109, Expense, PartnerOutcomePaymentBudget, OutcomePaymentBudget, OutcomePaymentBudget);


// ==================================================================================================================
// Приходы (Payment), Получает FIT
// относительно коментария СБДСРххх
// смотрим EnterpriseDataExchange определение CLASS ABSTRACT ... Документ, CLASS ABSTRACT ...Строка
// ==================================================================================================================

// ПБДСРасчетыСКонтрагентами
EXTEND CLASS Payment : EnterpriseData.IncomePaymentPartner;
EXTEND CLASS Payment : EnterpriseData.IncomePaymentPartnerDetail;
@onImportDataP(201, Payment, PartnerIncomePaymentPartner, IncomePaymentPartner, IncomePaymentPartner);

// ПБДСПрочееПоступление
EXTEND CLASS Payment : EnterpriseData.IncomePaymentOther;
EXTEND CLASS Payment : EnterpriseData.IncomePaymentOtherDetail;
@onImportData(202, Payment, PartnerIncomePaymentOther, IncomePaymentOther, IncomePaymentOther);

// ПБДСРасчетыССотрудниками
EXTEND CLASS Payment : EnterpriseData.IncomePaymentEmployee;
EXTEND CLASS Payment : EnterpriseData.IncomePaymentEmployeeDetail;
@onImportData(203, Payment, PartnerIncomePaymentEmployee, IncomePaymentEmployee, IncomePaymentEmployee);

// ПБДСПоПлатежнымКартам
EXTEND CLASS Payment : EnterpriseData.IncomePaymentCard;
EXTEND CLASS Payment : EnterpriseData.IncomePaymentCardDetail;
@onImportData(204, Payment, PartnerIncomePaymentCard, IncomePaymentCard, IncomePaymentCard);

// ПБДСКонвертацияВалюты
EXTEND CLASS Payment : EnterpriseData.IncomePaymentExchange; 
EXTEND CLASS Payment : EnterpriseData.IncomePaymentExchangeDetail;
@onImportData(205, Payment,  PartnerIncomePaymentExchange, IncomePaymentExchange, IncomePaymentExchange); 

// ПБДСПрочиеДоходы
EXTEND CLASS Payment : EnterpriseData.IncomePaymentProfit;
EXTEND CLASS Payment : EnterpriseData.IncomePaymentProfitDetail;
@onImportDataShort(206, Payment, IncomePaymentProfit, IncomePaymentProfit, 'x206', '1С ПБДС ПрочиеДоходы');

overReceive(Configuration c) + {
    onClearTempTable();
    onFillTempAccount(c,company(c)); 
    onImportData101(c); onImportData102(c); onImportData103(c);  // Расходы
    onImportData104(c); onImportData105(c); onImportData106(c);  // Расходы
    onImportData107(c); onImportData108(c); onImportData109(c);  // Расходы
    onImportDataP201(c); onImportData202(c); onImportData203(c); // Приходы
    onImportData204(c); onImportData205(c); onImportData206(c);  // Приходы
    onClearTempTable();
}


