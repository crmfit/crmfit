MODULE EnterpriseDataCrmFit;

REQUIRE EnterpriseData, EnterpriseDataExchange, EnterpriseTest,
        LegalEntityFit, Customer, Payment, Expense, Utils, Time;

NAMESPACE EnterpriseData;

EXTEND CLASS LegalEntity : EnterpriseData.Partner;

// проверка на ИНН организации: могут быть ранее введенные организации
// чтобы исключить повторы в создании организаций проверяем по ИНН
checkInn (STRING[12] cid) = GROUP LAST LegalEntity o ORDER o BY INN(o);

rewriteUidLegalEntity 'Перезаписывать uid при получении' = DATA BOOLEAN ();

EXTEND FORM integrationData PROPERTIES () rewriteUidLegalEntity;    
   
DESIGN integrationData {
    enterpriseData {
        NEW cntOther BEFORE cGrid {
            caption = 'Дополнительно';
            MOVE PROPERTY (rewriteUidLegalEntity());
        }
    }
}

// ТИП ДАННЫХ: платежные поручения, оплачивает ФИТ, расходы - Expense
// ----------------------------------------------------------------------------
EXTEND CLASS Expense : EnterpriseData.PaymentOrder; // uid 'Ссылка' = DATA STRING[36] ;
EXTEND CLASS Expense : EnterpriseData.PaymentOrderDetail;

// основной метод обработки
onImportPaymentOrder (Configuration c) {
    LOCAL ob = LegalEntity ();
    // организации
    // -----------------------------------------------------------------------------------------------------------------------------
    // для каждого объекта (отдельного клиента, отдельного документа) существует свой уникальный UID
    // группируем по UID (GROUP MAX) и таблицу для FOR попадут только уникальные уникальные элементы массива с индексом i
    // по условию, что такой ИНН не существует (checkInn)
        FOR INTEGER i = [GROUP MAX INTEGER j BY uidPartnerPaymentOrder(j)](ISTRING[36] d) AND  
            NOT object(uidPartnerPaymentOrder(i)) AND NOT checkInn(innPartnerPaymentOrder(i)) DO NEW le = LegalEntity.LegalEntity {
                NEW ob = Customer {
                    uid(le) <- uidPartnerPaymentOrder(i);
                    Customer.name(ob) <- ISTRING[250](namePartnerPaymentOrder(i));
                    LegalEntity.customer(le) <- ob;
                    LegalEntity.name(le) <- ISTRING[250](namePartnerPaymentOrder(i));
                    LegalEntity.fullName(le) <- ISTRING[250](fullNamePartnerPaymentOrder(i));
                    LegalEntityFit.INN(le) <- STRING[12](innPartnerPaymentOrder(i));
                    LegalEntityFit.KPP(le) <- STRING[9](kppPartnerPaymentOrder(i));
                }
        } 
        // обратная синронизация по ИНН: Если организация существует по ИНН, то переписываем для нее UID
        // тогда для платежек всяегда будут свои организации
        FOR INTEGER i = [GROUP MAX INTEGER j BY uidPartnerPaymentOrder(j)](ISTRING[36] d) AND 
            NOT object(uidPartnerPaymentOrder(i)) AND rewriteUidLegalEntity() AND LegalEntity le = checkInn(innPartnerPaymentOrder(i)) DO {
            uid(le) <- uidPartnerPaymentOrder(i);
        }
    //  платежи
    // -----------------------------------------------------------------------------------------------------------------------------
    FOR uidPaymentOrder(INTEGER i) AND NOT object(uidPaymentOrder(i)) DO NEW e = Expense.Expense { uid(e) <- uidPaymentOrder(i); }
    FOR Expense.Expense e = object(uidPaymentOrder(INTEGER i)) AS Expense  DO {
//        Expense.number(e) <- STRING[15](idPaymentOrder(i));
        Expense.date(e) <- toDateFormat(datePaymentOrder(i),'YYYY-MM-DD');
        Expense.sum(e) <- NUMERIC[16,5](sumPaymentOrder(i));
        Expense.note(e) <- ISTRING[100](purposePaymentDetail(i));
        legalEntity(e) <- object(uidPartnerPaymentOrder(i))  AS LegalEntity;
    }
}

// ТИП ДАННЫХ: ПБДСРасчетыСКонтрагентами, платят ФИТ, платежи (приходы) - Payment
// ----------------------------------------------------------------------------
EXTEND CLASS Payment : EnterpriseData.IncomePaymentPartner;
EXTEND CLASS Payment : EnterpriseData.IncomePaymentPartnerDetail;

// основной метод обработки
onImportIncomePayment(Configuration c) {
    LOCAL ob = LegalEntity ();
    // организации
    // -----------------------------------------------------------------------------------------------------------------------------
        FOR INTEGER i = [GROUP MAX INTEGER j BY uidPartnerIncomePaymentPartner(j)](ISTRING[36] d) AND  
            NOT object(uidPartnerIncomePaymentPartner(i)) AND NOT checkInn(innPartnerIncomePaymentPartner(i)) DO NEW le = LegalEntity.LegalEntity {
                NEW ob = Customer {
                    uid(le) <- uidPartnerIncomePaymentPartner(i);
                    Customer.name(ob) <- ISTRING[250](namePartnerIncomePaymentPartner(i));
                    LegalEntity.customer(le) <- ob;
                    LegalEntity.name(le) <- ISTRING[250](namePartnerIncomePaymentPartner(i));
                    LegalEntity.fullName(le) <- ISTRING[250](fullNamePartnerIncomePaymentPartner(i));
                    LegalEntityFit.INN(le) <- STRING[12](innPartnerIncomePaymentPartner(i));
                    LegalEntityFit.KPP(le) <- STRING[9](kppPartnerIncomePaymentPartner(i));
                }
        } 
        FOR INTEGER i = [GROUP MAX INTEGER j BY uidPartnerIncomePaymentPartner(j)](ISTRING[36] d) AND 
            NOT object(uidPartnerIncomePaymentPartner(i)) AND rewriteUidLegalEntity() AND LegalEntity le = checkInn(innPartnerIncomePaymentPartner(i)) DO {
            uid(le) <- uidPartnerIncomePaymentPartner(i);
        }
    //  платежи
    // -----------------------------------------------------------------------------------------------------------------------------
    FOR uidIncomePaymentPartner(INTEGER i) AND NOT object(uidIncomePaymentPartner(i)) DO NEW p = Payment.Payment { 
        uid(p) <- uidIncomePaymentPartner(i); 
    }
    FOR Payment.Payment p = object(uidIncomePaymentPartner(INTEGER i)) AS Payment  DO {
        Payment.number(p) <- STRING[15](idIncomePaymentPartner(i));
        Payment.date(p) <- toDateFormat(dateIncomePaymentPartner(i),'YYYY-MM-DD');
        Payment.sum(p) <- NUMERIC[16,5](sumIncomePaymentPartner(i));
        Payment.note(p) <- ISTRING[100](purposeIncomePaymentPartner(i));
        legalEntity(p) <- object(uidPartnerIncomePaymentPartner(i))  AS LegalEntity;
    }
}

// Основной метод импорта данных
overReceive(Configuration c) + {
    onImportPaymentOrder(c);
//        SHOW viewExpense DOCKED; // отладка: форма расходы
    onImportIncomePayment(c);
//        SHOW viewPayments DOCKED; // отладка: форма платежи
//        CANCEL; // отладка
}